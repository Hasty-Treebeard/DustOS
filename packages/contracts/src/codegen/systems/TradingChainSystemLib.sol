// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { TradingChainSystem } from "../../systems/TradingChainSystem.sol";
import { EntityId } from "@dust/world/src/types/EntityId.sol";
import { ObjectType } from "@dust/world/src/types/ObjectType.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type TradingChainSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "my_namespace", name: "TradingChainSyst" }))
TradingChainSystemType constant tradingChainSystem = TradingChainSystemType.wrap(
  0x73796d795f6e616d657370616365000054726164696e67436861696e53797374
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title TradingChainSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library TradingChainSystemLib {
  error TradingChainSystemLib_CallingFromRootSystem();

  function setTradeLink(TradingChainSystemType self, EntityId chest, ObjectType fromItem, ObjectType toItem) internal {
    return CallWrapper(self.toResourceId(), address(0)).setTradeLink(chest, fromItem, toItem);
  }

  function removeTradeLink(TradingChainSystemType self, EntityId chest, ObjectType fromItem) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeTradeLink(chest, fromItem);
  }

  function getTradeLink(
    TradingChainSystemType self,
    EntityId chest,
    ObjectType fromItem
  ) internal view returns (ObjectType __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0)).getTradeLink(chest, fromItem);
  }

  function setTradeLink(CallWrapper memory self, EntityId chest, ObjectType fromItem, ObjectType toItem) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TradingChainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setTradeLink_EntityId_ObjectType_ObjectType.setTradeLink,
      (chest, fromItem, toItem)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeTradeLink(CallWrapper memory self, EntityId chest, ObjectType fromItem) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TradingChainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_removeTradeLink_EntityId_ObjectType.removeTradeLink, (chest, fromItem));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getTradeLink(
    CallWrapper memory self,
    EntityId chest,
    ObjectType fromItem
  ) internal view returns (ObjectType __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TradingChainSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getTradeLink_EntityId_ObjectType.getTradeLink, (chest, fromItem));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (ObjectType));
    }
  }

  function setTradeLink(RootCallWrapper memory self, EntityId chest, ObjectType fromItem, ObjectType toItem) internal {
    bytes memory systemCall = abi.encodeCall(
      _setTradeLink_EntityId_ObjectType_ObjectType.setTradeLink,
      (chest, fromItem, toItem)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeTradeLink(RootCallWrapper memory self, EntityId chest, ObjectType fromItem) internal {
    bytes memory systemCall = abi.encodeCall(_removeTradeLink_EntityId_ObjectType.removeTradeLink, (chest, fromItem));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function getTradeLink(
    RootCallWrapper memory self,
    EntityId chest,
    ObjectType fromItem
  ) internal view returns (ObjectType __auxRet0) {
    bytes memory systemCall = abi.encodeCall(_getTradeLink_EntityId_ObjectType.getTradeLink, (chest, fromItem));

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (ObjectType));
    }
  }

  function callFrom(TradingChainSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(TradingChainSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(TradingChainSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(TradingChainSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(TradingChainSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (TradingChainSystemType) {
    return TradingChainSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(TradingChainSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _setTradeLink_EntityId_ObjectType_ObjectType {
  function setTradeLink(EntityId chest, ObjectType fromItem, ObjectType toItem) external;
}

interface _removeTradeLink_EntityId_ObjectType {
  function removeTradeLink(EntityId chest, ObjectType fromItem) external;
}

interface _getTradeLink_EntityId_ObjectType {
  function getTradeLink(EntityId chest, ObjectType fromItem) external;
}

using TradingChainSystemLib for TradingChainSystemType global;
using TradingChainSystemLib for CallWrapper global;
using TradingChainSystemLib for RootCallWrapper global;
