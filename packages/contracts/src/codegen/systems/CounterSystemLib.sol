// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CounterSystem } from "../../systems/CounterSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CounterSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "dustos", name: "CounterSystem" }))
CounterSystemType constant counterSystem = CounterSystemType.wrap(
  0x7379647573746f730000000000000000436f756e74657253797374656d000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title CounterSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CounterSystemLib {
  error CounterSystemLib_CallingFromRootSystem();

  function increment(CounterSystemType self) internal {
    return CallWrapper(self.toResourceId(), address(0)).increment();
  }

  function decrement(CounterSystemType self) internal {
    return CallWrapper(self.toResourceId(), address(0)).decrement();
  }

  function setValue(CounterSystemType self, uint256 newValue) internal {
    return CallWrapper(self.toResourceId(), address(0)).setValue(newValue);
  }

  function getValue(CounterSystemType self) internal view returns (uint256 __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0)).getValue();
  }

  function increment(CallWrapper memory self) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CounterSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_increment.increment, ());
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function decrement(CallWrapper memory self) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CounterSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_decrement.decrement, ());
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setValue(CallWrapper memory self, uint256 newValue) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CounterSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setValue_uint256.setValue, (newValue));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getValue(CallWrapper memory self) internal view returns (uint256 __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CounterSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_getValue.getValue, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function increment(RootCallWrapper memory self) internal {
    bytes memory systemCall = abi.encodeCall(_increment.increment, ());
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function decrement(RootCallWrapper memory self) internal {
    bytes memory systemCall = abi.encodeCall(_decrement.decrement, ());
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setValue(RootCallWrapper memory self, uint256 newValue) internal {
    bytes memory systemCall = abi.encodeCall(_setValue_uint256.setValue, (newValue));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function getValue(RootCallWrapper memory self) internal view returns (uint256 __auxRet0) {
    bytes memory systemCall = abi.encodeCall(_getValue.getValue, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function callFrom(CounterSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(CounterSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(CounterSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(CounterSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(CounterSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CounterSystemType) {
    return CounterSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(CounterSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _increment {
  function increment() external;
}

interface _decrement {
  function decrement() external;
}

interface _setValue_uint256 {
  function setValue(uint256 newValue) external;
}

interface _getValue {
  function getValue() external;
}

using CounterSystemLib for CounterSystemType global;
using CounterSystemLib for CallWrapper global;
using CounterSystemLib for RootCallWrapper global;
