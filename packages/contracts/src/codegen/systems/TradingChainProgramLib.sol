// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { TradingChainProgram } from "../../TradingChainProgram.sol";
import { HookContext, ITransfer } from "@dust/world/src/ProgramHooks.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type TradingChainProgramType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "my_namespace", name: "TradingChainProg" }))
TradingChainProgramType constant tradingChainProgram = TradingChainProgramType.wrap(
  0x73796d795f6e616d657370616365000054726164696e67436861696e50726f67
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title TradingChainProgramLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library TradingChainProgramLib {
  error TradingChainProgramLib_CallingFromRootSystem();

  function onAttachProgram(TradingChainProgramType self, HookContext memory ctx) internal {
    return CallWrapper(self.toResourceId(), address(0)).onAttachProgram(ctx);
  }

  function onDetachProgram(TradingChainProgramType self, HookContext memory ctx) internal {
    return CallWrapper(self.toResourceId(), address(0)).onDetachProgram(ctx);
  }

  function onTransfer(
    TradingChainProgramType self,
    HookContext memory ctx,
    ITransfer.TransferData memory transfer
  ) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onTransfer(ctx, transfer);
  }

  function _msgSender(TradingChainProgramType self) internal view returns (address __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0))._msgSender();
  }

  function _msgValue(TradingChainProgramType self) internal view returns (uint256 __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0))._msgValue();
  }

  function onAttachProgram(CallWrapper memory self, HookContext memory ctx) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TradingChainProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onAttachProgram_HookContext.onAttachProgram, (ctx));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function onDetachProgram(CallWrapper memory self, HookContext memory ctx) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TradingChainProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onDetachProgram_HookContext.onDetachProgram, (ctx));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function onTransfer(
    CallWrapper memory self,
    HookContext memory ctx,
    ITransfer.TransferData memory transfer
  ) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TradingChainProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _onTransfer_HookContext_ITransfer_TransferData.onTransfer,
      (ctx, transfer)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function _msgSender(CallWrapper memory self) internal view returns (address __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TradingChainProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(__msgSender._msgSender, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (address));
    }
  }

  function _msgValue(CallWrapper memory self) internal view returns (uint256 __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TradingChainProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(__msgValue._msgValue, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function onAttachProgram(RootCallWrapper memory self, HookContext memory ctx) internal {
    bytes memory systemCall = abi.encodeCall(_onAttachProgram_HookContext.onAttachProgram, (ctx));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function onDetachProgram(RootCallWrapper memory self, HookContext memory ctx) internal {
    bytes memory systemCall = abi.encodeCall(_onDetachProgram_HookContext.onDetachProgram, (ctx));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function onTransfer(
    RootCallWrapper memory self,
    HookContext memory ctx,
    ITransfer.TransferData memory transfer
  ) internal view {
    bytes memory systemCall = abi.encodeCall(
      _onTransfer_HookContext_ITransfer_TransferData.onTransfer,
      (ctx, transfer)
    );
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function _msgSender(RootCallWrapper memory self) internal view returns (address __auxRet0) {
    bytes memory systemCall = abi.encodeCall(__msgSender._msgSender, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (address));
    }
  }

  function _msgValue(RootCallWrapper memory self) internal view returns (uint256 __auxRet0) {
    bytes memory systemCall = abi.encodeCall(__msgValue._msgValue, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function callFrom(TradingChainProgramType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(TradingChainProgramType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(TradingChainProgramType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(TradingChainProgramType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(TradingChainProgramType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (TradingChainProgramType) {
    return TradingChainProgramType.wrap(resourceId.unwrap());
  }

  function getAddress(TradingChainProgramType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _onAttachProgram_HookContext {
  function onAttachProgram(HookContext memory ctx) external;
}

interface _onDetachProgram_HookContext {
  function onDetachProgram(HookContext memory ctx) external;
}

interface _onTransfer_HookContext_ITransfer_TransferData {
  function onTransfer(HookContext memory ctx, ITransfer.TransferData memory transfer) external;
}

interface __msgSender {
  function _msgSender() external;
}

interface __msgValue {
  function _msgValue() external;
}

using TradingChainProgramLib for TradingChainProgramType global;
using TradingChainProgramLib for CallWrapper global;
using TradingChainProgramLib for RootCallWrapper global;
